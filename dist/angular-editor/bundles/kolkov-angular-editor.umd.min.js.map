{"version":3,"sources":["ng://@kolkov/angular-editor/lib/angular-editor.service.ts","ng://@kolkov/angular-editor/lib/config.ts","ng://@kolkov/angular-editor/lib/angular-editor-toolbar.component.ts","ng://@kolkov/angular-editor/lib/angular-editor.component.ts","ng://@kolkov/angular-editor/lib/utils.ts","ng://@kolkov/angular-editor/lib/angular-editor.module.ts"],"names":["AngularEditorService","http","doc","_this","this","saveSelection","getSelection","sel","getRangeAt","rangeCount","savedSelection","selectedText","toString","createRange","document","prototype","executeCommand","command","includes","execCommand","createLink","url","newUrl","insertHtml","insertSlide","insertColor","color","where","restoreSelection","setFontName","fontName","setFontSize","fontSize","html","Error","removeAllRanges","addRange","executeInNextQueueIteration","callbackFn","timeout","setTimeout","checkSelection","length","uploadImage","file","uploadData","FormData","append","name","post","uploadUrl","reportProgress","observe","insertImage","imageUrl","setDefaultParagraphSeparator","separator","createCustomClass","customClass","newTag","tagName","tag","class","insertVideo","videoUrl","match","insertYouTubeVideoTag","insertVimeoVideoTag","id","split","thumbnail","sub","get","subscribe","data","thumbnail_url_with_play_button","title","unsubscribe","nextNode","node","hasChildNodes","firstChild","nextSibling","parentNode","getRangeSelectedNodes","range","includePartiallySelectedContainers","startContainer","endNode","endContainer","rangeNodes","push","commonAncestorContainer","unshift","getSelectedNodes","nodes","i","len","apply","replaceWithOwnChildren","el","parent","insertBefore","removeChild","removeSelectedElements","tagNames","tagNamesArray","toLowerCase","forEach","nodeType","indexOf","Injectable","args","providedIn","HttpClient","Inject","DOCUMENT","angularEditorConfig","editable","spellcheck","height","minHeight","maxHeight","width","minWidth","translate","enableToolbar","showToolbar","placeholder","defaultParagraphSeparator","defaultFontName","defaultFontSize","fonts","sanitize","toolbarPosition","AngularEditorToolbarComponent","r","editorService","htmlMode","linkSelected","block","customClassId","tagMap","BLOCKQUOTE","A","select","buttons","execute","EventEmitter","Object","defineProperty","Boolean","triggerCommand","emit","triggerButtons","e","result","queryCommandState","elementById","getElementById","addClass","removeClass","triggerBlocks","findIndex","x","nodeName","found","y","find","undefined","customClasses","index","Element","className","keys","map","foreColour","queryCommandValue","replace","backColor","insertUrl","selection","parentElement","parent_1","href","prompt","foreColor","setEditorMode","m","toggleEditorModeButton","onFileChanged","event","target","files","type","HttpResponse","body","fileReset","reader","FileReader","onload","fr","readAsDataURL","myInputFile","nativeElement","value","setCustomClass","classId","Component","selector","template","Renderer2","Output","ViewChild","AngularEditorComponent","sanitizer","cdRef","defaultTabIndex","autoFocus","modeVisual","showPlaceholder","disabled","focused","config","viewMode","blurEvent","focusEvent","tabindex","parsedTabIndex","Number","tabIndex","onFocus","focus","ngOnInit","ngAfterViewInit","configure","detectChanges","toggleEditorMode","getCustomTags","onContentChange","textArea","innerHTML","exec","onTextAreaFocus","stopPropagation","onTextAreaMouseOut","onTextAreaBlur","onTouched","relatedTarget","onChange","SecurityContext","HTML","togglePlaceholder","registerOnChange","fn","registerOnTouched","writeValue","refreshView","normalizedValue","setProperty","editorWrapper","setDisabledState","isDisabled","div","action","bToSource","oContent","editableElement","createText","oPre","createElement","setStyle","oCode","appendChild","focusInstance","listen","blurInstance","querySelectorAll","innerText","selectNodeContents","editorToolbar","userSelection","a","focusNode","els","tags","join","ngOnDestroy","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","DomSanitizer","ChangeDetectorRef","Attribute","Input","HostBinding","HostListener","AngularEditorModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpEvent} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {CustomClass} from './config';\n\nexport interface UploadResponse {\n  imageUrl: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularEditorService {\n\n  savedSelection: Range | null;\n  selectedText: string;\n  uploadUrl: string;\n\n  constructor(\n    private http: HttpClient,\n    @Inject(DOCUMENT) private doc: any\n  ) { }\n\n  /**\n   * Executed command from editor header buttons exclude toggleEditorMode\n   * @param command string from triggerCommand\n   */\n  executeCommand(command: string) {\n    const commands = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'pre'];\n    if (commands.includes(command)) {\n      this.doc.execCommand('formatBlock', false, command);\n      return;\n    }\n    this.doc.execCommand(command, false, null);\n  }\n\n  /**\n   * Create URL link\n   * @param url string from UI prompt\n   */\n  createLink(url: string) {\n    if (!url.includes('http')) {\n      this.doc.execCommand('createlink', false, url);\n    } else {\n      const newUrl = '<a href=\"' + url + '\" target=\"_blank\">' + this.selectedText + '</a>';\n      this.insertHtml(newUrl);\n    }\n  }\n\n  /**\n   * Create URL link\n   * @param url string from UI prompt\n   */\n  insertSlide(url: string) {\n    const newUrl = '<div class=\"collapse multi-collapse\" id=\"' + url + '\">' + this.selectedText + '</div>';\n    this.insertHtml(newUrl);\n  }\n\n  /**\n   * insert color either font or background\n   *\n   * @param color color to be inserted\n   * @param where where the color has to be inserted either text/background\n   */\n  insertColor(color: string, where: string): void {\n    const restored = this.restoreSelection();\n    if (restored) {\n      if (where === 'textColor') {\n        this.doc.execCommand('foreColor', false, color);\n      } else {\n        this.doc.execCommand('hiliteColor', false, color);\n      }\n    }\n  }\n\n  /**\n   * Set font name\n   * @param fontName string\n   */\n  setFontName(fontName: string) {\n    this.doc.execCommand('fontName', false, fontName);\n  }\n\n  /**\n   * Set font size\n   * @param fontSize string\n   */\n  setFontSize(fontSize: string) {\n    this.doc.execCommand('fontSize', false, fontSize);\n  }\n\n  /**\n   * Create raw HTML\n   * @param html HTML string\n   */\n  insertHtml(html: string): void {\n\n    const isHTMLInserted = this.doc.execCommand('insertHTML', false, html);\n\n    if (!isHTMLInserted) {\n      throw new Error('Unable to perform the operation');\n    }\n  }\n\n  /**\n   * save selection when the editor is focussed out\n   */\n  public saveSelection = (): void => {\n    if (this.doc.getSelection) {\n      const sel = this.doc.getSelection();\n      if (sel.getRangeAt && sel.rangeCount) {\n        this.savedSelection = sel.getRangeAt(0);\n        this.selectedText = sel.toString();\n      }\n    } else if (this.doc.getSelection && this.doc.createRange) {\n      this.savedSelection = document.createRange();\n    } else {\n      this.savedSelection = null;\n    }\n  }\n\n  /**\n   * restore selection when the editor is focused in\n   *\n   * saved selection when the editor is focused out\n   */\n  restoreSelection(): boolean {\n    if (this.savedSelection) {\n      if (this.doc.getSelection) {\n        const sel = this.doc.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(this.savedSelection);\n        return true;\n      } else if (this.doc.getSelection /*&& this.savedSelection.select*/) {\n        // this.savedSelection.select();\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * setTimeout used for execute 'saveSelection' method in next event loop iteration\n   */\n  public executeInNextQueueIteration(callbackFn: (...args: any) => any, timeout = 1e2): void {\n    setTimeout(callbackFn, timeout);\n  }\n\n  /** check any selection is made or not */\n  private checkSelection(): any {\n\n    const selectedText = this.savedSelection.toString();\n\n    if (selectedText.length === 0) {\n      throw new Error('No Selection Made');\n    }\n    return true;\n  }\n\n  /**\n   * Upload file to uploadUrl\n   * @param file The file\n   */\n  uploadImage(file: File): Observable<HttpEvent<UploadResponse>> {\n\n    const uploadData: FormData = new FormData();\n\n    uploadData.append('file', file, file.name);\n\n    return this.http.post<UploadResponse>(this.uploadUrl, uploadData, {\n      reportProgress: true,\n      observe: 'events',\n    });\n  }\n\n  /**\n   * Insert image with Url\n   * @param imageUrl The imageUrl.\n   */\n  insertImage(imageUrl: string) {\n    this.doc.execCommand('insertImage', false, imageUrl);\n  }\n\n  setDefaultParagraphSeparator(separator: string) {\n    this.doc.execCommand('defaultParagraphSeparator', false, separator);\n  }\n\n  createCustomClass(customClass: CustomClass) {\n    let newTag = this.selectedText;\n    if (customClass) {\n      const tagName = customClass.tag ? customClass.tag : 'span';\n      newTag = '<' + tagName + ' class=\"' + customClass.class + '\">' + this.selectedText + '</' + tagName + '>';\n    }\n    this.insertHtml(newTag);\n  }\n\n  insertVideo(videoUrl: string) {\n    if (videoUrl.match('www.youtube.com')) {\n      this.insertYouTubeVideoTag(videoUrl);\n    }\n    if (videoUrl.match('vimeo.com')) {\n      this.insertVimeoVideoTag(videoUrl);\n    }\n  }\n\n  private insertYouTubeVideoTag(videoUrl: string): void {\n    const id = videoUrl.split('v=')[1];\n    const imageUrl = `https://img.youtube.com/vi/${id}/0.jpg`;\n    const thumbnail = `\n      <div style='position: relative'>\n        <img style='position: absolute; left:200px; top:140px'\n             src=\"https://img.icons8.com/color/96/000000/youtube-play.png\"\n        <a href='${videoUrl}' target='_blank'>\n          <img src=\"${imageUrl}\" alt=\"click to watch\"/>\n        </a>\n      </div>`;\n    this.insertHtml(thumbnail);\n  }\n\n  private insertVimeoVideoTag(videoUrl: string): void {\n    const sub = this.http.get<any>(`https://vimeo.com/api/oembed.json?url=${videoUrl}`).subscribe(data => {\n      const imageUrl = data.thumbnail_url_with_play_button;\n      const thumbnail = `<div>\n        <a href='${videoUrl}' target='_blank'>\n          <img src=\"${imageUrl}\" alt=\"${data.title}\"/>\n        </a>\n      </div>`;\n      this.insertHtml(thumbnail);\n      sub.unsubscribe();\n    });\n  }\n\n  nextNode(node) {\n    if (node.hasChildNodes()) {\n      return node.firstChild;\n    } else {\n      while (node && !node.nextSibling) {\n        node = node.parentNode;\n      }\n      if (!node) {\n        return null;\n      }\n      return node.nextSibling;\n    }\n  }\n\n  getRangeSelectedNodes(range, includePartiallySelectedContainers) {\n    let node = range.startContainer;\n    const endNode = range.endContainer;\n    let rangeNodes = [];\n\n    // Special case for a range that is contained within a single node\n    if (node === endNode) {\n      rangeNodes = [node];\n    } else {\n      // Iterate nodes until we hit the end container\n      while (node && node !== endNode) {\n        rangeNodes.push( node = this.nextNode(node) );\n      }\n\n      // Add partially selected nodes at the start of the range\n      node = range.startContainer;\n      while (node && node !== range.commonAncestorContainer) {\n        rangeNodes.unshift(node);\n        node = node.parentNode;\n      }\n    }\n\n    // Add ancestors of the range container, if required\n    if (includePartiallySelectedContainers) {\n      node = range.commonAncestorContainer;\n      while (node) {\n        rangeNodes.push(node);\n        node = node.parentNode;\n      }\n    }\n\n    return rangeNodes;\n  }\n\n  getSelectedNodes() {\n    const nodes = [];\n    if (this.doc.getSelection) {\n      const sel = this.doc.getSelection();\n      for (let i = 0, len = sel.rangeCount; i < len; ++i) {\n        nodes.push.apply(nodes, this.getRangeSelectedNodes(sel.getRangeAt(i), true));\n      }\n    }\n    return nodes;\n  }\n\n  replaceWithOwnChildren(el) {\n    const parent = el.parentNode;\n    while (el.hasChildNodes()) {\n      parent.insertBefore(el.firstChild, el);\n    }\n    parent.removeChild(el);\n  }\n\n  removeSelectedElements(tagNames) {\n    const tagNamesArray = tagNames.toLowerCase().split(',');\n    this.getSelectedNodes().forEach((node) => {\n      if (node.nodeType === 1 &&\n        tagNamesArray.indexOf(node.tagName.toLowerCase()) > -1) {\n        // Remove the node and replace it with its children\n        this.replaceWithOwnChildren(node);\n      }\n    });\n  }\n}\n","export interface CustomClass {\n  name: string;\n  class: string;\n  tag?: string;\n}\n\nexport interface Font {\n  name: string;\n  class: string;\n}\n\nexport interface AngularEditorConfig {\n  editable?: boolean;\n  spellcheck?: boolean;\n  height?: 'auto' | string;\n  minHeight?: '0' | string;\n  maxHeight?: 'auto' | string;\n  width?: 'auto' | string;\n  minWidth?: '0' | string;\n  translate?: 'yes' | 'now' | string;\n  enableToolbar?: boolean;\n  showToolbar?: boolean;\n  placeholder?: string;\n  defaultParagraphSeparator?: string;\n  defaultFontName?: string;\n  defaultFontSize?: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | string;\n  uploadUrl?: string;\n  fonts?: Font[];\n  customClasses?: CustomClass[];\n  sanitize?: boolean;\n  toolbarPosition?: 'top' | 'bottom';\n}\n\nexport const angularEditorConfig: AngularEditorConfig = {\n  editable: true,\n  spellcheck: true,\n  height: 'auto',\n  minHeight: '0',\n  maxHeight: 'auto',\n  width: 'auto',\n  minWidth: '0',\n  translate: 'yes',\n  enableToolbar: true,\n  showToolbar: true,\n  placeholder: 'Enter text here...',\n  defaultParagraphSeparator: '',\n  defaultFontName: '',\n  defaultFontSize: '',\n  fonts: [\n    {class: 'arial', name: 'Arial'},\n    {class: 'times-new-roman', name: 'Times New Roman'},\n    {class: 'calibri', name: 'Calibri'},\n    {class: 'comic-sans-ms', name: 'Comic Sans MS'}\n  ],\n  uploadUrl: 'v1/image',\n  sanitize: true,\n  toolbarPosition: 'top',\n};\n","import { Component, ElementRef, EventEmitter, Inject, Output, Renderer2, ViewChild } from '@angular/core';\nimport { AngularEditorService } from './angular-editor.service';\nimport { HttpResponse } from '@angular/common/http';\nimport { DOCUMENT } from '@angular/common';\nimport { CustomClass, Font } from './config';\n\n@Component({\n  selector: 'angular-editor-toolbar',\n  templateUrl: './angular-editor-toolbar.component.html',\n  styleUrls: ['./angular-editor-toolbar.component.scss']\n})\n\nexport class AngularEditorToolbarComponent {\n  id = '';\n  htmlMode = false;\n  showToolbar = true;\n  linkSelected = false;\n  block = 'default';\n  defaultFontId;\n  fontName;\n  fontSize = '5';\n  foreColour;\n  backColor;\n\n  fonts: Font[];\n\n  customClassId = -1;\n  customClasses: CustomClass[];\n  uploadUrl: string;\n\n  tagMap = {\n    BLOCKQUOTE: 'indent',\n    A: 'link'\n  };\n\n  select = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'P', 'PRE', 'DIV'];\n\n  buttons = ['bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', 'justifyLeft', 'justifyCenter',\n    'justifyRight', 'justifyFull', 'indent', 'outdent', 'insertUnorderedList', 'insertOrderedList', 'link'];\n\n  @Output() execute: EventEmitter<string> = new EventEmitter<string>();\n\n  @ViewChild('fileInput') myInputFile: ElementRef;\n\n  public get isLinkButtonDisabled(): boolean {\n    return this.htmlMode || !Boolean(this.editorService.selectedText);\n  }\n\n  constructor(\n    private r: Renderer2,\n    private editorService: AngularEditorService,\n    @Inject(DOCUMENT) private doc: any\n  ) { }\n\n  /**\n   * Trigger command from editor header buttons\n   * @param command string from toolbar buttons\n   */\n  triggerCommand(command: string) {\n    this.execute.emit(command);\n  }\n\n  /**\n   * highlight editor buttons when cursor moved or positioning\n   */\n  triggerButtons() {\n    if (!this.showToolbar) {\n      return;\n    }\n    this.buttons.forEach(e => {\n      const result = this.doc.queryCommandState(e);\n      const elementById = this.doc.getElementById(e + '-' + this.id);\n      if (result) {\n        this.r.addClass(elementById, 'active');\n      } else {\n        this.r.removeClass(elementById, 'active');\n      }\n    });\n  }\n\n  /**\n   * trigger highlight editor buttons when cursor moved or positioning in block\n   */\n  triggerBlocks(nodes: Node[]) {\n    if (!this.showToolbar) {\n      return;\n    }\n    this.linkSelected = nodes.findIndex(x => x.nodeName === 'A') > -1;\n    let found = false;\n    this.select.forEach(y => {\n      const node = nodes.find(x => x.nodeName === y);\n      if (node !== undefined && y === node.nodeName) {\n        if (found === false) {\n          this.block = node.nodeName.toLowerCase();\n          found = true;\n        }\n      } else if (found === false) {\n        this.block = 'default';\n      }\n    });\n\n    found = false;\n    if (this.customClasses) {\n      this.customClasses.forEach((y, index) => {\n        const node = nodes.find(x => {\n          if (x instanceof Element) {\n            return x.className === y.class;\n          }\n        });\n        if (node !== undefined) {\n          if (found === false) {\n            this.customClassId = index;\n            found = true;\n          }\n        } else if (found === false) {\n          this.customClassId = -1;\n        }\n      });\n    }\n\n    Object.keys(this.tagMap).map(e => {\n      const elementById = this.doc.getElementById(this.tagMap[e] + '-' + this.id);\n      const node = nodes.find(x => x.nodeName === e);\n      if (node !== undefined && e === node.nodeName) {\n        this.r.addClass(elementById, 'active');\n      } else {\n        this.r.removeClass(elementById, 'active');\n      }\n    });\n\n    this.foreColour = this.doc.queryCommandValue('ForeColor');\n    this.fontSize = this.doc.queryCommandValue('FontSize');\n    this.fontName = this.doc.queryCommandValue('FontName').replace(/\"/g, '');\n    this.backColor = this.doc.queryCommandValue('backColor');\n  }\n\n  /**\n   * insert URL link\n   */\n  insertUrl() {\n    let url = 'https:\\/\\/';\n    const selection = this.editorService.savedSelection;\n    if (selection && selection.commonAncestorContainer.parentElement.nodeName === 'A') {\n      const parent = selection.commonAncestorContainer.parentElement as HTMLAnchorElement;\n      if (parent.href !== '') {\n        url = parent.href;\n      }\n    }\n    url = prompt('Insert URL link', url);\n    if (url && url !== '' && url !== 'https://') {\n      this.editorService.createLink(url);\n    }\n  }\n\n  /**\n  **\n   * insert URL link\n   */\n  insertSlide() {\n    this.execute.emit('');\n    const url = prompt('Nom du contenant', ``);\n    if (url) {\n      this.editorService.insertSlide(url);\n    }\n  }\n\n  /**\n   * insert Video link\n   */\n  insertVideo() {\n    this.execute.emit('');\n    const url = prompt('Insert Video link', `https://`);\n    if (url && url !== '' && url !== `https://`) {\n      this.editorService.insertVideo(url);\n    }\n  }\n\n  /** insert color */\n  insertColor(color: string, where: string) {\n    this.editorService.insertColor(color, where);\n    this.execute.emit('');\n  }\n\n  /**\n   * set font Name/family\n   * @param foreColor string\n   */\n  setFontName(foreColor: string): void {\n    this.editorService.setFontName(foreColor);\n    this.execute.emit('');\n  }\n\n  /**\n   * set font Size\n   * @param fontSize string\n   */\n  setFontSize(fontSize: string): void {\n    this.editorService.setFontSize(fontSize);\n    this.execute.emit('');\n  }\n\n  /**\n   * toggle editor mode (WYSIWYG or SOURCE)\n   * @param m boolean\n   */\n  setEditorMode(m: boolean) {\n    const toggleEditorModeButton = this.doc.getElementById('toggleEditorMode' + '-' + this.id);\n    if (m) {\n      this.r.addClass(toggleEditorModeButton, 'active');\n    } else {\n      this.r.removeClass(toggleEditorModeButton, 'active');\n    }\n    this.htmlMode = m;\n  }\n\n  /**\n   * Upload image when file is selected\n   */\n  onFileChanged(event) {\n    const file = event.target.files[0];\n    if (file.type.includes('image/')) {\n      if (this.uploadUrl) {\n        this.editorService.uploadImage(file).subscribe(e => {\n          if (e instanceof HttpResponse) {\n            this.editorService.insertImage(e.body.imageUrl);\n            this.fileReset();\n          }\n        });\n      } else {\n        const reader = new FileReader();\n        reader.onload = (e: ProgressEvent) => {\n          const fr = e.currentTarget as FileReader;\n          this.editorService.insertImage(fr.result.toString());\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  }\n\n  /**\n   * Reset Input\n   */\n  fileReset() {\n    this.myInputFile.nativeElement.value = '';\n  }\n\n  /**\n   * Set custom class\n   */\n  setCustomClass(classId: number) {\n    if (classId === -1) {\n      this.execute.emit('clear');\n    } else {\n      this.editorService.createCustomClass(this.customClasses[classId]);\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  SecurityContext,\n  ViewChild\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {AngularEditorConfig, angularEditorConfig} from './config';\nimport {AngularEditorToolbarComponent} from './angular-editor-toolbar.component';\nimport {AngularEditorService} from './angular-editor.service';\nimport {DOCUMENT} from '@angular/common';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {isDefined} from './utils';\n\n@Component({\n  selector: 'angular-editor',\n  templateUrl: './angular-editor.component.html',\n  styleUrls: ['./angular-editor.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AngularEditorComponent),\n      multi: true\n    }\n  ]\n})\nexport class AngularEditorComponent implements OnInit, ControlValueAccessor, AfterViewInit, OnDestroy {\n\n  private onChange: (value: string) => void;\n  private onTouched: () => void;\n\n  modeVisual = true;\n  showPlaceholder = false;\n  disabled = false;\n  focused = false;\n\n  focusInstance: any;\n  blurInstance: any;\n\n  @Input() id = '';\n  @Input() config: AngularEditorConfig = angularEditorConfig;\n  @Input() placeholder = '';\n  @Input() tabIndex: number | null;\n\n  @Output() html;\n\n  @ViewChild('editor') textArea: any;\n  @ViewChild('editorWrapper') editorWrapper: any;\n  @ViewChild('editorToolbar') editorToolbar: AngularEditorToolbarComponent;\n\n  @Output() viewMode = new EventEmitter<boolean>();\n\n  /** emits `blur` event when focused out from the textarea */\n    // tslint:disable-next-line:no-output-native no-output-rename\n  @Output('blur') blurEvent: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n\n  /** emits `focus` event when focused in to the textarea */\n    // tslint:disable-next-line:no-output-rename no-output-native\n  @Output('focus') focusEvent: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n\n  @HostBinding('attr.tabindex') tabindex = -1;\n\n  @HostListener('focus')\n  onFocus() {\n    this.focus();\n  }\n\n  constructor(\n    private r: Renderer2,\n    private editorService: AngularEditorService,\n    @Inject(DOCUMENT) private doc: any,\n    private sanitizer: DomSanitizer,\n    private cdRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string,\n    @Attribute('autofocus') private autoFocus: any,\n  ) {\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnInit() {\n    if (this.config.defaultParagraphSeparator) {\n      this.editorService.setDefaultParagraphSeparator(this.config.defaultParagraphSeparator);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (isDefined(this.autoFocus)) {\n      this.focus();\n    }\n    this.configure();\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Executed command from editor header buttons\n   * @param command string from triggerCommand\n   */\n  executeCommand(command: string) {\n    this.focus();\n    if (command === 'toggleEditorMode') {\n      this.toggleEditorMode(this.modeVisual);\n    } else if (command !== '') {\n      if (command === 'clear') {\n        this.editorService.removeSelectedElements(this.getCustomTags());\n        this.onContentChange(this.textArea.nativeElement.innerHTML);\n      } else if (command === 'default') {\n        this.editorService.removeSelectedElements('h1,h2,h3,h4,h5,h6,p,pre');\n        this.onContentChange(this.textArea.nativeElement.innerHTML);\n      } else {\n        this.editorService.executeCommand(command);\n      }\n      this.exec();\n    }\n  }\n\n  /**\n   * focus event\n   */\n  onTextAreaFocus(event: FocusEvent): void {\n    if (this.focused) {\n      event.stopPropagation();\n      return;\n    }\n    this.focused = true;\n    this.focusEvent.emit(event);\n  }\n\n  /**\n   * @description fires when cursor leaves textarea\n   */\n  public onTextAreaMouseOut(event: MouseEvent): void {\n    this.editorService.saveSelection();\n  }\n\n  /**\n   * blur event\n   */\n  onTextAreaBlur(event: FocusEvent) {\n    /**\n     * save selection if focussed out\n     */\n    this.editorService.executeInNextQueueIteration(this.editorService.saveSelection);\n\n    if (typeof this.onTouched === 'function') {\n      this.onTouched();\n    }\n\n    if (event.relatedTarget != null && (event.relatedTarget as HTMLElement).parentElement.className !== 'angular-editor-toolbar-set') {\n      this.blurEvent.emit(event);\n      this.focused = false;\n    }\n  }\n\n  /**\n   *  focus the text area when the editor is focused\n   */\n  focus() {\n    if (this.modeVisual) {\n      this.textArea.nativeElement.focus();\n    } else {\n      const sourceText = this.doc.getElementById('sourceText' + this.id);\n      sourceText.focus();\n      this.focused = true;\n    }\n  }\n\n  /**\n   * Executed from the contenteditable section while the input property changes\n   * @param html html string from contenteditable\n   */\n  onContentChange(html: string): void {\n    if ((!html || html === '<br>')) {\n      html = '';\n    }\n    if (typeof this.onChange === 'function') {\n      this.onChange(this.config.sanitize || this.config.sanitize === undefined ?\n        this.sanitizer.sanitize(SecurityContext.HTML, html) : html);\n      if ((!html) !== this.showPlaceholder) {\n        this.togglePlaceholder(this.showPlaceholder);\n      }\n    }\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a change event.\n   *\n   * @param fn a function\n   */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a touch event.\n   *\n   * @param fn a function\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Write a new value to the element.\n   *\n   * @param value value to be executed when there is a change in contenteditable\n   */\n  writeValue(value: any): void {\n\n    if ((!value || value === '<br>' || value === '') !== this.showPlaceholder) {\n      this.togglePlaceholder(this.showPlaceholder);\n    }\n\n    if (value === undefined || value === '' || value === '<br>') {\n      value = null;\n    }\n\n    this.refreshView(value);\n  }\n\n  /**\n   * refresh view/HTML of the editor\n   *\n   * @param value html string from the editor\n   */\n  refreshView(value: string): void {\n    const normalizedValue = value === null ? '' : value;\n    this.r.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\n\n    return;\n  }\n\n  /**\n   * toggles placeholder based on input string\n   *\n   * @param value A HTML string from the editor\n   */\n  togglePlaceholder(value: boolean): void {\n    if (!value) {\n      this.r.addClass(this.editorWrapper.nativeElement, 'show-placeholder');\n      this.showPlaceholder = true;\n\n    } else {\n      this.r.removeClass(this.editorWrapper.nativeElement, 'show-placeholder');\n      this.showPlaceholder = false;\n    }\n  }\n\n  /**\n   * Implements disabled state for this element\n   *\n   * @param isDisabled Disabled flag\n   */\n  setDisabledState(isDisabled: boolean): void {\n    const div = this.textArea.nativeElement;\n    const action = isDisabled ? 'addClass' : 'removeClass';\n    this.r[action](div, 'disabled');\n    this.disabled = isDisabled;\n  }\n\n  /**\n   * toggles editor mode based on bToSource bool\n   *\n   * @param bToSource A boolean value from the editor\n   */\n  toggleEditorMode(bToSource: boolean) {\n    let oContent: any;\n    const editableElement = this.textArea.nativeElement;\n\n    if (bToSource) {\n      oContent = this.r.createText(editableElement.innerHTML);\n      this.r.setProperty(editableElement, 'innerHTML', '');\n      this.r.setProperty(editableElement, 'contentEditable', false);\n\n      const oPre = this.r.createElement('pre');\n      this.r.setStyle(oPre, 'margin', '0');\n      this.r.setStyle(oPre, 'outline', 'none');\n\n      const oCode = this.r.createElement('code');\n      this.r.setProperty(oCode, 'id', 'sourceText' + this.id);\n      this.r.setStyle(oCode, 'display', 'block');\n      this.r.setStyle(oCode, 'white-space', 'pre-wrap');\n      this.r.setStyle(oCode, 'word-break', 'keep-all');\n      this.r.setStyle(oCode, 'outline', 'none');\n      this.r.setStyle(oCode, 'margin', '0');\n      this.r.setStyle(oCode, 'background-color', '#fff5b9');\n      this.r.setProperty(oCode, 'contentEditable', true);\n      this.r.appendChild(oCode, oContent);\n      this.focusInstance = this.r.listen(oCode, 'focus', () => this.onTextAreaFocus(null));\n      this.blurInstance = this.r.listen(oCode, 'blur', (event) => this.onTextAreaBlur(event));\n      this.r.appendChild(oPre, oCode);\n      this.r.appendChild(editableElement, oPre);\n\n      // ToDo move to service\n      this.doc.execCommand('defaultParagraphSeparator', false, 'div');\n\n      this.modeVisual = false;\n      this.viewMode.emit(false);\n      oCode.focus();\n    } else {\n      if (this.doc.querySelectorAll) {\n        this.r.setProperty(editableElement, 'innerHTML', editableElement.innerText);\n      } else {\n        oContent = this.doc.createRange();\n        oContent.selectNodeContents(editableElement.firstChild);\n        this.r.setProperty(editableElement, 'innerHTML', oContent.toString());\n      }\n      this.r.setProperty(editableElement, 'contentEditable', true);\n      this.modeVisual = true;\n      this.viewMode.emit(true);\n      this.onContentChange(editableElement.innerHTML);\n      editableElement.focus();\n    }\n    this.editorToolbar.setEditorMode(!this.modeVisual);\n  }\n\n  /**\n   * toggles editor buttons when cursor moved or positioning\n   *\n   * Send a node array from the contentEditable of the editor\n   */\n  exec() {\n    this.editorToolbar.triggerButtons();\n\n    let userSelection;\n    if (this.doc.getSelection) {\n      userSelection = this.doc.getSelection();\n      this.editorService.executeInNextQueueIteration(this.editorService.saveSelection);\n    }\n\n    let a = userSelection.focusNode;\n    const els = [];\n    while (a && a.id !== 'editor') {\n      els.unshift(a);\n      a = a.parentNode;\n    }\n    this.editorToolbar.triggerBlocks(els);\n  }\n\n  private configure() {\n    this.editorToolbar.id = this.id;\n    this.config.toolbarPosition = this.config.toolbarPosition ? this.config.toolbarPosition : angularEditorConfig.toolbarPosition;\n    if (this.config.showToolbar !== undefined) {\n      this.editorToolbar.showToolbar = this.config.showToolbar;\n    }\n    this.editorToolbar.fonts = this.config.fonts ? this.config.fonts : angularEditorConfig.fonts;\n    this.editorToolbar.customClasses = this.config.customClasses;\n    this.editorToolbar.uploadUrl = this.config.uploadUrl;\n    this.editorService.uploadUrl = this.config.uploadUrl;\n    if (this.config.defaultFontName) {\n      this.editorToolbar.fontName = this.config.defaultFontName;\n      this.editorService.setFontName(this.config.defaultFontName);\n    } else {\n      this.editorToolbar.fontName = 'Times New Roman';\n    }\n    if (this.config.defaultFontSize) {\n      this.editorToolbar.fontSize = this.config.defaultFontSize;\n      this.editorService.setFontSize(this.config.defaultFontSize);\n    }\n  }\n\n  getCustomTags() {\n    const tags = ['span'];\n    this.config.customClasses.forEach(x => {\n      if (x.tag !== undefined) {\n        if (!tags.includes(x.tag)) {\n          tags.push(x.tag);\n        }\n      }\n    });\n    return tags.join(',');\n  }\n\n  ngOnDestroy() {\n    if (this.blurInstance) {\n      this.blurInstance();\n    }\n    if (this.focusInstance) {\n      this.focusInstance();\n    }\n  }\n}\n","export function isDefined(value: any) {\n  return value !== undefined && value !== null;\n}\n","import {NgModule} from '@angular/core';\nimport {AngularEditorComponent} from './angular-editor.component';\nimport {AngularEditorToolbarComponent} from './angular-editor-toolbar.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule, FormsModule, ReactiveFormsModule\n  ],\n  declarations: [AngularEditorComponent, AngularEditorToolbarComponent],\n  exports: [AngularEditorComponent, AngularEditorToolbarComponent]\n})\nexport class AngularEditorModule {\n}\n"]}